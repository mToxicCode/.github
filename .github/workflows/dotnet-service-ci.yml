name: Dotnet Service CI Workflow

on:
  workflow_call:
    inputs:
      dotnet:
        description: 'Dotnet Version'
        required: false
        type: string
        default: '[ "6.0" ]'
      docker-registry:
        description: 'Docker Registry'
        required: false
        type: string
        default: '[ "ghcr.io" ]'
      nuget-registry:
        description: 'Nuget Registry'
        type: string
        required: false
        default: '[ "github" ]'
      tests-mode:
        description: 'Failed tests behaviour: skip | strict'
        type: string
        required: false
        default: 'skip'

jobs:
  pre:
    runs-on: ubuntu-latest
    outputs:
      unit: ${{ steps.check_units.outputs.files_exists }}
      integration: ${{ steps.check_integrations.outputs.files_exists }}
      version: ${{steps.version.outputs.version_tag}}
    steps:
      - uses: actions/checkout@v1
      - name: Check for unit tests
        id: check_units
        uses: andstor/file-existence-action@v1
        with:
          files: "*.Tests.csproj"
      - name: Check for integration tests
        id: check_integrations
        uses: andstor/file-existence-action@v1
        with:
          files: "*.IntegrationTests.csproj, docker-compose.integration.yml"
      - uses: paulhatch/semantic-version@v4.0.2
        id: version
        with:
          major_pattern: "(breaking)"
          minor_pattern: "(fix)"
          format: "${major}.${minor}.${patch}"
          search_commit_body: true
  build:
    needs: pre
    strategy:
      matrix:
        dotnet: ${{fromJSON(inputs.dotnet)}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}
      - run: dotnet build
  unit-tests:
    needs: pre
    continue-on-error: ${{inputs.tests-mode == 'skip'}}
   # if: ${{ needs.pre.outputs.check_units  }}
    strategy:
      matrix:
        dotnet: ${{fromJSON(inputs.dotnet)}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}
      - run: dotnet test *.Tests.csproj
  integration-tests: # TODO: Add docker-compose work
    needs: pre
    continue-on-error: ${{inputs.tests-mode == 'skip'}}
  #  if: ${{ needs.pre.outputs.check_integrations  }}
    strategy:
      matrix:
        dotnet: ${{fromJSON(inputs.dotnet)}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}
      - run: dotnet test *.IntegrationsTests.csproj
        
  publish-docker-image:
    needs: [pre, build, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        registry: ${{fromJSON(inputs.docker-registry)}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the registry
        uses: docker/login-action@master
        with:
          registry: ${{ matrix.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (Latest)
        uses: docker/metadata-action@master
        id: meta
        with:
          images: ${{ matrix.registry }}/${{ github.repository }}
          tags: |
            type=raw, value=latest
            type=raw, value=${{ inputs.version }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@master
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  
  publish-nuget-package:
    needs: [pre, build, unit-tests, integration-tests]
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        mode: ${{fromJSON(inputs.nuget-repository)}}
    name: Create nuget package
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Setup .NET Core @ Latest
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ fromJSON(inputs.dotnet) }}

      - name: Log in registry
        run: |
          dotnet nuget add source --username ${{github.actor}} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{github.repository_owner}}/index.json"
          dotnet nuget add source --store-password-in-clear-text --name nuget "https://api.nuget.org/v3/index.json"

      - name: Build & Pack NuGet package
        run: |
          dotnet pack -c Release -o out -p:PackageVersion=${{ github.event.inputs.version }}

      - name: Push generated package to GitHub registry
        if: ${{matrix.mode == 'github'}}
        run: dotnet nuget push ./out/*.nupkg --skip-duplicate --no-symbols true --api-key ${{secrets.GITHUB_TOKEN}} --source "github"

      - name: Push generated package to Nuget registry
        if: ${{matrix.mode == 'nuget'}}
        run: dotnet nuget push ./out/*.nupkg --skip-duplicate --no-symbols true --api-key ${{secrets.NUGET_API_KEY}} --source "nuget"
      
  create-tag:
    needs: [pre, build, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{needs.pre.outputs.version}}